{"version":3,"sources":["components/Program.js","App.js","reportWebVitals.js","index.js"],"names":["Program","props","state","start","datasetId","vehicleIds","vehicles","dealerIds","dealers","answer","success","message","hasRun","handleStart","bind","runAnswer","a","this","setState","axios","get","then","response","data","vehicleId","vehicle","indexOf","dealerId","length","dealer","filter","vehilce","postObj","post","answerStr","totalMilliseconds","successStr","messageStr","onClick","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0be6710c.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n\nclass Program extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        start: false,\n        datasetId: '',\n        vehicleIds: [],\n        vehicles: [],\n        dealerIds: [],\n        dealers: [],\n        answer: 'Loading...',\n        success: '',\n        message: '',\n        hasRun: false\n      };\n\n      this.handleStart = this.handleStart.bind(this);\n      this.runAnswer = this.runAnswer.bind(this);\n    }\n\n    async handleStart(){\n        this.setState({start: true, answer: \"Getting datasetId...\"})\n\n        let datasetId = await axios.get('https://api.coxauto-interview.com/api/datasetId')\n        .then((response) => response.data);\n\n        this.setState({datasetId: datasetId.datasetId, answer: \"Getting vehicleIds...\"})\n\n        let vehicleIds = await axios.get(`https://api.coxauto-interview.com/api/${this.state.datasetId}/vehicles`)\n        .then((response) => response.data)\n\n        this.setState({vehicleIds: vehicleIds.vehicleIds, answer: \"Getting vehicles and dealers...\"})\n        \n        for(let vehicleId of this.state.vehicleIds){\n            axios.get(`https://api.coxauto-interview.com/api/${this.state.datasetId}/vehicles/${vehicleId}`)\n            .then((response) => {\n                let vehicle = response.data;\n                if(this.state.dealerIds.indexOf(vehicle.dealerId) < 0){\n                    this.setState({ dealerIds: [...this.state.dealerIds, vehicle.dealerId] })\n                    axios.get(`https://api.coxauto-interview.com/api/${this.state.datasetId}/dealers/${vehicle.dealerId}`)\n                    .then((response) => {                 \n                        this.setState({ dealers: [...this.state.dealers, response.data] })\n                        if(this.state.vehicles.length === 9 && this.state.dealers.length === 3 && this.state.hasRun === false){\n                            this.setState({ hasRun: true })\n                            this.runAnswer();\n                        }\n                    })\n                }\n                this.setState({ vehicles: [...this.state.vehicles, vehicle] })\n                if(this.state.vehicles.length === 9 && this.state.dealers.length === 3 && this.state.hasRun === false){\n                    this.setState({ hasRun: true })\n                    this.runAnswer();\n                }\n            }) \n        }\n    }\n\n    async runAnswer(){\n        this.setState({answer: \"Posting answer...\"})\n        for(let dealer of this.state.dealers){\n            let vehicles = this.state.vehicles.filter(vehilce => vehilce.dealerId === dealer.dealerId);\n            dealer.vehicles = vehicles;\n        }\n\n        let postObj = {\n            dealers: this.state.dealers\n        }\n\n        let answer = await axios.post(`https://api.coxauto-interview.com/api/${this.state.datasetId}/answer`, postObj)\n        .then((response) => response.data)\n\n        let answerStr = `Total Milliseconds: ${answer.totalMilliseconds}`;\n        let successStr = `Success: ${answer.success}`;\n        let messageStr = `Message: ${answer.message}`;\n        this.setState({answer: answerStr, success: successStr, message: messageStr})\n    }\n  \n    render() {\n      return (\n        <div>\n            { this.state.start ? \n            <div>\n                <h2>{this.state.success}</h2>\n                <h2>{this.state.message}</h2>\n                <h2>{this.state.answer}</h2> \n            </div>\n            : \n                <button onClick={this.handleStart}>Start Program</button>\n            }\n\n        </div>\n      );\n    }\n  }\n\n  export default Program;","import './App.css';\nimport Program from './components/Program.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Program />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}